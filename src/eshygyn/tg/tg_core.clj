(ns eshygyn.tg.tg-core
  (:require [telegrambot-lib.core :as tg]
            [dotenv :refer [env]]))

(defonce last-offset (atom 0))

(def token (env :TOKEN))

(defonce bot (tg/create token))

(defn handle-message [message]
  (println message)
  (let [chat-id (get-in message [:chat :id])
        text (:text message)]
    (cond
      (= text "/start")
      (tg/send-message bot chat-id "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π Expense Tracker –±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

      :else
      (tg/send-message bot chat-id (str "–¢—ã –Ω–∞–ø–∏—Å–∞–ª: " text)))))

(defn poll-updates [offset]
  (try
    (let [updates (tg/get-updates bot {:offset offset :timeout 30})]
      (doseq [update (:result updates)]
        (let [message (:message update)
              update-id (:update_id update)]
          (when message
            (handle-message message))
          (reset! last-offset (inc update-id)))))
    (catch Exception e
      (println "–û—à–∏–±–∫–∞ polling:" (.getMessage e)))))

(defn poll-updates-caller []
  (poll-updates @last-offset))