(ns eshygyn.tg.handle-messages
  (:require [telegrambot-lib.core :as tg]
            
            [eshygyn.db.db :as db]
            [eshygyn.tg.commands :as commands]
            [eshygyn.tg.messages :as messages]
            [eshygyn.tg.new-expense :as new-expense])
  (:import (java.time.format DateTimeFormatter DateTimeParseException)))

(defn handle-message [bot message]
  (println "\033[34mINFO\033[0m " message) ; delete
  (let [chat-id (get-in message [:chat :id])
        text (:text message)
        user-id (get-in message [:from :id])
        {:keys [stage draft]} (new-expense/get-session chat-id)]
    (if (= text "/authorize")
      (commands/authorize bot chat-id (get-in message [:from :first_name]) (get-in message [:from :username]))

      (if (db/is-authorized chat-id)
        (cond
          (= text "/start") (commands/start bot chat-id)

          (= text "/add") (new-expense/handle-add-cmd bot chat-id) 

          (= text "/cancel") (commands/cancel bot chat-id)

          (nil? stage)
          (tg/send-message bot chat-id "‚ÑπÔ∏è –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add")
          
          (= stage :enter-amount)
          (let [amt (new-expense/parse-amount text)]
            (if (nil? amt)
              (tg/send-message bot chat-id "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: 1200 –∏–ª–∏ 1 499,50")
              (do
                (new-expense/set-stage! chat-id :enter-time :amount amt)
                (tg/send-message bot chat-id
                                 (str "üïí –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è.\n"
                                      "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è¬ª –Ω–∏–∂–µ\n"
                                      "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: dd.MM.yy HH:mm (–Ω–∞–ø—Ä. 31.10.25 14:05)\n"
                                      "–¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è dd.MM.yyyy HH:mm")
                                 :reply_markup (new-expense/time-kb)))))
          
          (= stage :enter-time)
          (let [dt (new-expense/parse-datetime text)]
            (if (nil? dt)
              (tg/send-message bot chat-id "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dd.MM.yy HH:mm –∏–ª–∏ dd.MM.yyyy HH:mm.\n–ù–∞–ø—Ä.: 31.10.25 14:05")
              (let [{:keys [category amount]} draft]
                (db/create-expence user-id category amount dt)
                (new-expense/clear-session! chat-id)
                (tg/send-message bot chat-id
                                 (format "‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n‚Ä¢ –°—É–º–º–∞: %s\n‚Ä¢ –í—Ä–µ–º—è: %s"
                                         category amount (.format dt (DateTimeFormatter/ofPattern "dd.MM.yyyy HH:mm z")))))))

          :else (tg/send-message bot chat-id "ü§î –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ /cancel –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /add"))

        (messages/authorize bot chat-id)))))